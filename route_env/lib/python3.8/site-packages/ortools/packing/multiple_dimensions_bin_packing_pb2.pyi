"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class MultipleDimensionsBinPackingShape(google.protobuf.message.Message):
    """A Multiple Dimension BinPacking problem.
    It supports the following file format:
     - 2bp:
       see http://or.dei.unibo.it/library/two-dimensional-bin-packing-problem

    The generated problems have the following characteristics:

    You have identical boxes with n dimensions. The size of one box is stored in
    the field box_shape().
    You need to fit all items into the minimum number of boxes. Each item has the
    same number of dimensions and one or more possible shapes (this usually means
    that you can rotate the item).
    Each item must not overlap (in n dimensions) with any other item.

    The shape of one item. each edge is parallel to one axis of a dimension.
    One shape cannot be rotated, the item itself will contain multiple rotated
    shapes.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DIMENSIONS_FIELD_NUMBER: builtins.int
    @property
    def dimensions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(self,
        *,
        dimensions: typing.Optional[typing.Iterable[builtins.int]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["dimensions",b"dimensions"]) -> None: ...
global___MultipleDimensionsBinPackingShape = MultipleDimensionsBinPackingShape

class MultipleDimensionsBinPackingItem(google.protobuf.message.Message):
    """Items with multiple shapes often means that they can be rotated."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SHAPES_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    @property
    def shapes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MultipleDimensionsBinPackingShape]:
        """All available shapes of the item."""
        pass
    value: builtins.int
    """The value of the item (useful when solving the problem as a knapsack)."""

    def __init__(self,
        *,
        shapes: typing.Optional[typing.Iterable[global___MultipleDimensionsBinPackingShape]] = ...,
        value: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["shapes",b"shapes","value",b"value"]) -> None: ...
global___MultipleDimensionsBinPackingItem = MultipleDimensionsBinPackingItem

class MultipleDimensionsBinPackingProblem(google.protobuf.message.Message):
    """The full problem: the enclosing box and the list of items."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BOX_SHAPE_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def box_shape(self) -> global___MultipleDimensionsBinPackingShape:
        """The enclosing shape."""
        pass
    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MultipleDimensionsBinPackingItem]:
        """All available items of the problem."""
        pass
    def __init__(self,
        *,
        box_shape: typing.Optional[global___MultipleDimensionsBinPackingShape] = ...,
        items: typing.Optional[typing.Iterable[global___MultipleDimensionsBinPackingItem]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["box_shape",b"box_shape"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["box_shape",b"box_shape","items",b"items"]) -> None: ...
global___MultipleDimensionsBinPackingProblem = MultipleDimensionsBinPackingProblem
