"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _VectorBinPackingSolveStatus:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _VectorBinPackingSolveStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_VectorBinPackingSolveStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    VECTOR_BIN_PACKING_SOLVE_STATUS_UNSPECIFIED: _VectorBinPackingSolveStatus.ValueType  # 0
    """Default state."""

    OPTIMAL: _VectorBinPackingSolveStatus.ValueType  # 1
    """The optimal solution was found and proven."""

    FEASIBLE: _VectorBinPackingSolveStatus.ValueType  # 2
    """A feasible solution has been found."""

    INFEASIBLE: _VectorBinPackingSolveStatus.ValueType  # 3
    """The problem is infeasible."""

class VectorBinPackingSolveStatus(_VectorBinPackingSolveStatus, metaclass=_VectorBinPackingSolveStatusEnumTypeWrapper):
    """Solve status"""
    pass

VECTOR_BIN_PACKING_SOLVE_STATUS_UNSPECIFIED: VectorBinPackingSolveStatus.ValueType  # 0
"""Default state."""

OPTIMAL: VectorBinPackingSolveStatus.ValueType  # 1
"""The optimal solution was found and proven."""

FEASIBLE: VectorBinPackingSolveStatus.ValueType  # 2
"""A feasible solution has been found."""

INFEASIBLE: VectorBinPackingSolveStatus.ValueType  # 3
"""The problem is infeasible."""

global___VectorBinPackingSolveStatus = VectorBinPackingSolveStatus


class Item(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    RESOURCE_USAGE_FIELD_NUMBER: builtins.int
    NUM_COPIES_FIELD_NUMBER: builtins.int
    MAX_NUMBER_OF_COPIES_PER_BIN_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Optional name. This is only used for display/debugging purposes."""

    @property
    def resource_usage(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Resource usages for this item. All usages must be non-negative.
        Should be the same size as resource_capacity in the
        VectorBinPackingProblem.
        """
        pass
    num_copies: builtins.int
    """Number of identical copies of this item."""

    max_number_of_copies_per_bin: builtins.int
    """An optional upper bound on how many copies of the same item are allowed in
    a single bin, regardless of resource utilization. A value of 0 is
    interpreted as no limit.
    """

    def __init__(self,
        *,
        name: typing.Text = ...,
        resource_usage: typing.Optional[typing.Iterable[builtins.int]] = ...,
        num_copies: builtins.int = ...,
        max_number_of_copies_per_bin: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["max_number_of_copies_per_bin",b"max_number_of_copies_per_bin","name",b"name","num_copies",b"num_copies","resource_usage",b"resource_usage"]) -> None: ...
global___Item = Item

class VectorBinPackingProblem(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    NAME_FIELD_NUMBER: builtins.int
    RESOURCE_CAPACITY_FIELD_NUMBER: builtins.int
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    ITEM_FIELD_NUMBER: builtins.int
    MAX_BINS_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Optional name."""

    @property
    def resource_capacity(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Max capacity of each resource.
        All bins have the same resource capacities.
        """
        pass
    @property
    def resource_name(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Resources names. This can either be left empty or
        must be of the same size as resource_capacity.
        """
        pass
    @property
    def item(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Item]:
        """The list of items which are to be assigned to bins."""
        pass
    max_bins: builtins.int
    """The maximum number of bins available. A value of 0 is interpreted as no
    limit. Nonzero values are used to encode feasibility problems.
    """

    def __init__(self,
        *,
        name: typing.Text = ...,
        resource_capacity: typing.Optional[typing.Iterable[builtins.int]] = ...,
        resource_name: typing.Optional[typing.Iterable[typing.Text]] = ...,
        item: typing.Optional[typing.Iterable[global___Item]] = ...,
        max_bins: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["item",b"item","max_bins",b"max_bins","name",b"name","resource_capacity",b"resource_capacity","resource_name",b"resource_name"]) -> None: ...
global___VectorBinPackingProblem = VectorBinPackingProblem

class VectorBinPackingOneBinInSolution(google.protobuf.message.Message):
    """Describe one filled bin in the solution."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ITEM_INDICES_FIELD_NUMBER: builtins.int
    ITEM_COPIES_FIELD_NUMBER: builtins.int
    @property
    def item_indices(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Which items are in this bin. They are supposed to be unique."""
        pass
    @property
    def item_copies(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """How many of each items are in this bins."""
        pass
    def __init__(self,
        *,
        item_indices: typing.Optional[typing.Iterable[builtins.int]] = ...,
        item_copies: typing.Optional[typing.Iterable[builtins.int]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["item_copies",b"item_copies","item_indices",b"item_indices"]) -> None: ...
global___VectorBinPackingOneBinInSolution = VectorBinPackingOneBinInSolution

class VectorBinPackingSolution(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SOLVER_INFO_FIELD_NUMBER: builtins.int
    BINS_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    OBJECTIVE_VALUE_FIELD_NUMBER: builtins.int
    SOLVE_TIME_IN_SECONDS_FIELD_NUMBER: builtins.int
    ARC_FLOW_TIME_IN_SECONDS_FIELD_NUMBER: builtins.int
    solver_info: typing.Text
    """Optional info from the solver."""

    @property
    def bins(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___VectorBinPackingOneBinInSolution]:
        """Filled bins."""
        pass
    status: global___VectorBinPackingSolveStatus.ValueType
    """Solve status."""

    objective_value: builtins.float
    """Objective value."""

    solve_time_in_seconds: builtins.float
    """Solve time in seconds."""

    arc_flow_time_in_seconds: builtins.float
    """Time to create the Arc-Flow graph."""

    def __init__(self,
        *,
        solver_info: typing.Text = ...,
        bins: typing.Optional[typing.Iterable[global___VectorBinPackingOneBinInSolution]] = ...,
        status: global___VectorBinPackingSolveStatus.ValueType = ...,
        objective_value: builtins.float = ...,
        solve_time_in_seconds: builtins.float = ...,
        arc_flow_time_in_seconds: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["arc_flow_time_in_seconds",b"arc_flow_time_in_seconds","bins",b"bins","objective_value",b"objective_value","solve_time_in_seconds",b"solve_time_in_seconds","solver_info",b"solver_info","status",b"status"]) -> None: ...
global___VectorBinPackingSolution = VectorBinPackingSolution
